/**
 * @fileoverview Componente de gesti√≥n integral de paredes con an√°lisis ac√∫stico avanzado
 * 
 * Este componente proporciona una interfaz de usuario completa para la gesti√≥n,
 * an√°lisis y configuraci√≥n de paredes arquitect√≥nicas. Incluye an√°lisis ac√∫stico
 * detallado, gesti√≥n de estado de conservaci√≥n, c√°lculo de costos y generaci√≥n
 * de informes t√©cnicos. Integra m√∫ltiples stores para sincronizaci√≥n de datos.
 * 
 * @module WallsManager
 * @version 3.0.0
 * @author insonor Team
 * @since 2025
 * @requires React
 * @requires WallsStore
 * @requires OpeningsStore
 * @requires DrawingStore
 * @requires AcousticAnalysisEngine
 */

import React, { useState } from 'react';
import { useWallsStore } from '@/store/wallsStore';
import { useOpeningsStore } from '@/store/openingsStore';
import { useDrawingStore } from '@/store/drawingStore';
import { WALL_TEMPLATES, WallCondition } from '@/types/walls';
import { AcousticAnalysisEngine } from '@/engine/AcousticAnalysisEngine';
import { AcousticAnalysisModal } from './modals/AcousticAnalysisModal';

/**
 * @interface WallsManagerProps
 * @description Propiedades de configuraci√≥n para el gestor de paredes
 * 
 * Define la interfaz m√≠nima necesaria para controlar la visibilidad
 * y el comportamiento del panel de gesti√≥n de paredes.
 * 
 * @property {boolean} isVisible - Estado de visibilidad del panel de gesti√≥n
 * @property {Function} onToggle - Callback para cambiar el estado de visibilidad
 * 
 * @example
 * ```tsx
 * // Estado de visibilidad en componente padre
 * const [wallsManagerVisible, setWallsManagerVisible] = useState(false);
 * 
 * // Uso del componente
 * <WallsManager
 *   isVisible={wallsManagerVisible}
 *   onToggle={() => setWallsManagerVisible(!wallsManagerVisible)}
 * />
 * ```
 */
interface WallsManagerProps {
  isVisible: boolean;
  onToggle: () => void;
}

/**
 * @component WallsManager
 * @description Gestor integral de paredes con an√°lisis ac√∫stico avanzado
 * 
 * Proporciona una interfaz completa para la gesti√≥n de paredes arquitect√≥nicas,
 * incluyendo an√°lisis ac√∫stico detallado, gesti√≥n de costos, evaluaci√≥n de
 * estado de conservaci√≥n y generaci√≥n de informes t√©cnicos. Integra m√∫ltiples
 * sistemas de an√°lisis y stores de estado.
 * 
 * ## Funcionalidades principales:
 * - **Gesti√≥n de paredes**: CRUD completo de elementos de pared
 * - **An√°lisis ac√∫stico**: Evaluaci√≥n detallada de propiedades sonoras
 * - **Gesti√≥n de costos**: C√°lculo autom√°tico de materiales e instalaci√≥n
 * - **Estado de conservaci√≥n**: Seguimiento del estado f√≠sico de paredes
 * - **Generaci√≥n de informes**: Reportes t√©cnicos en formato JSON
 * - **Mapa de calor**: Visualizaci√≥n gr√°fica de an√°lisis ac√∫stico
 * - **Comparativas**: An√°lisis estad√≠stico del conjunto de paredes
 * 
 * ## Sistema de an√°lisis ac√∫stico:
 * - **P√©rdida de transmisi√≥n**: Evaluaci√≥n por bandas de frecuencia
 * - **Coeficiente de absorci√≥n**: An√°lisis de absorci√≥n ac√∫stica
 * - **Rating ac√∫stico**: Clasificaci√≥n A-E seg√∫n rendimiento
 * - **An√°lisis t√©rmico**: Propiedades de conductividad y resistencia
 * - **Factor de estado**: Impacto del estado de conservaci√≥n
 * 
 * ## Estados de conservaci√≥n:
 * - **Excellent** (Factor 1.0): Rendimiento √≥ptimo
 * - **Good** (Factor 0.95): Rendimiento muy bueno
 * - **Fair** (Factor 0.85): Rendimiento aceptable
 * - **Poor** (Factor 0.7): Rendimiento reducido
 * - **Damaged** (Factor 0.5): Requiere reparaci√≥n urgente
 * 
 * @param {WallsManagerProps} props - Propiedades de configuraci√≥n
 * @returns {JSX.Element} Panel de gesti√≥n completo o bot√≥n de acceso
 * 
 * @example
 * ```tsx
 * // Integraci√≥n en aplicaci√≥n principal
 * function App() {
 *   const [managersState, setManagersState] = useState({
 *     walls: false,
 *     openings: false,
 *     materials: false
 *   });
 * 
 *   return (
 *     <div className="app">
 *       <Scene3D />
 *       
 *       <WallsManager
 *         isVisible={managersState.walls}
 *         onToggle={() => setManagersState(prev => ({
 *           ...prev,
 *           walls: !prev.walls
 *         }))}
 *       />
 *       
 *       {// Otros managers...}
 *     </div>
 *   );
 * }
 * 
 * // Uso avanzado con configuraci√≥n personalizada
 * function AdvancedWallManagement() {
 *   const [analysisMode, setAnalysisMode] = useState('basic');
 *   const [filterCriteria, setFilterCriteria] = useState({
 *     minRating: 'C',
 *     maxCost: 1000,
 *     condition: 'all'
 *   });
 * 
 *   return (
 *     <WallsManager
 *       isVisible={true}
 *       onToggle={() => {}}
 *       analysisMode={analysisMode}
 *       filterCriteria={filterCriteria}
 *     />
 *   );
 * }
 * ```
 * 
 * @see {@link useWallsStore} Para gesti√≥n de estado de paredes
 * @see {@link AcousticAnalysisEngine} Para c√°lculos ac√∫sticos
 * @see {@link WALL_TEMPLATES} Para templates de configuraci√≥n
 * 
 * @performance
 * - **Estado local m√≠nimo**: Solo selectedWallId como estado interno
 * - **C√°lculos delegados**: Engine especializado para an√°lisis ac√∫stico
 * - **Renderizado condicional**: Panel completo solo cuando es visible
 * - **Memoizaci√≥n impl√≠cita**: Stores optimizados con Zustand
 * 
 * @accessibility
 * - **Colores sem√°nticos**: Estados visuales claramente diferenciados
 * - **Tooltips informativos**: Informaci√≥n contextual en botones
 * - **Confirmaciones**: Di√°logos de confirmaci√≥n para acciones destructivas
 * - **Navegaci√≥n por teclado**: Soporte completo para accesibilidad
 */
export const WallsManager: React.FC<WallsManagerProps> = ({ isVisible, onToggle }) => {
  
  /**
   * @section Hooks de estado y stores
   * @description Integraci√≥n con sistemas de estado centralizados
   */
  
  /**
   * @hook useWallsStore
   * @description Gesti√≥n completa del estado de paredes
   */
  const { walls, updateWall, deleteWall, recalculateAllWallsWithOpenings } = useWallsStore();
  
  /**
   * @hook useOpeningsStore
   * @description Acceso a aberturas para an√°lisis integral
   */
  const { openings } = useOpeningsStore();
  
  /**
   * @hook useDrawingStore
   * @description Coordenadas del plano para an√°lisis espacial
   */
  const { planeXZCoordinates } = useDrawingStore();
  
  /**
   * @state selectedWallId
   * @description ID de la pared actualmente seleccionada para edici√≥n
   * @type {string | null}
   */
  const [selectedWallId, setSelectedWallId] = useState<string | null>(null);

  /**
   * @state showAnalysisModal
   * @description Controla la visibilidad del modal de an√°lisis ac√∫stico profesional
   * @type {boolean}
   */
  const [showAnalysisModal, setShowAnalysisModal] = useState<boolean>(false);

  /**
   * @section Funciones de an√°lisis ac√∫stico
   * @description Sistema completo de an√°lisis y evaluaci√≥n ac√∫stica
   */

  /**
   * @function calculateRw
   * @description Calcula el √≠ndice de reducci√≥n sonora ponderado (Rw) seg√∫n ISO 717-1
   * 
   * ‚úÖ MOVIDO ANTES DE showDetailedAcousticAnalysis para que est√© disponible
   */
  const calculateRw = (transmissionLoss: any, density: number, thickness: number) => {
    const { low, mid, high } = transmissionLoss;
    
    // C√°lculo simplificado del Rw basado en ISO 717-1
    // F√≥rmula emp√≠rica que considera densidad y espesor
    const massPerArea = density * thickness; // kg/m¬≤
    
    // Ley de masas: Rw ‚âà 20 √ó log10(massPerArea) - 42
    let rwBase = 20 * Math.log10(massPerArea) - 42;
    
    // Correcci√≥n por frecuencias (promedio ponderado)
    const frequencyCorrection = (mid * 0.5 + low * 0.3 + high * 0.2) - rwBase;
    const rwCalculated = rwBase + frequencyCorrection * 0.3;
    
    // Clasificaci√≥n seg√∫n valor Rw
    let classification = '';
    let spectrum = '';
    
    if (rwCalculated >= 60) {
      classification = 'Excelente';
      spectrum = 'C50-5000';
    } else if (rwCalculated >= 50) {
      classification = 'Muy Bueno';
      spectrum = 'C50-3150';
    } else if (rwCalculated >= 45) {
      classification = 'Bueno';
      spectrum = 'C50-2500';
    } else if (rwCalculated >= 40) {
      classification = 'Regular';
      spectrum = 'C50-2000';
    } else if (rwCalculated >= 35) {
      classification = 'B√°sico';
      spectrum = 'C50-1600';
    } else {
      classification = 'Insuficiente';
      spectrum = 'C50-1250';
    }
    
    return {
      value: Math.max(0, rwCalculated), // No puede ser negativo
      classification,
      spectrum
    };
  };

  /**
   * @function showDetailedAcousticAnalysis
   * @description Genera an√°lisis ac√∫stico completo y detallado en consola
   * 
   * ‚úÖ AHORA calculateRw est√° disponible aqu√≠
   */
  const showDetailedAcousticAnalysis = () => {
    console.clear();
    console.log('üîä AN√ÅLISIS AC√öSTICO DETALLADO DE PAREDES');
    console.log('=========================================\n');
    
    if (walls.length === 0) {
      console.log('‚ö†Ô∏è No hay paredes para analizar');
      return;
    }
    
    // An√°lisis individual por pared
    walls.forEach((wall, index) => {
      console.log(`üß± PARED ${index + 1} - ${wall.template.name}:`);
      console.log(`   üÜî ID: ${wall.id}`);
      console.log(`   üìê √Årea: ${wall.area.toFixed(2)}m¬≤`);
      console.log(`   üìä Espesor: ${(wall.template.thickness * 100).toFixed(1)}cm`);
      console.log(`   üèóÔ∏è  Estado: ${wall.currentCondition}`);
      console.log(`   ‚≠ê Rating Ac√∫stico: ${wall.acousticRating || 'No calculado'}`);
      
      // An√°lisis ac√∫stico detallado
      const tl = wall.template.acousticProperties.transmissionLoss;
      const abs = wall.template.acousticProperties.absorptionCoefficient;
      
      // ‚úÖ C√ÅLCULO DEL Rw (Ahora funciona correctamente)
      const avgTransmissionLoss = (tl.low + tl.mid + tl.high) / 3;
      
      console.log(`\n   üîß DEBUG: Calculando Rw para pared ${index + 1}:`);
      console.log(`      ‚Ä¢ Densidad: ${wall.template.acousticProperties.density} kg/m¬≥`);
      console.log(`      ‚Ä¢ Espesor: ${wall.template.thickness} m`);
      console.log(`      ‚Ä¢ TL Low: ${tl.low}dB, Mid: ${tl.mid}dB, High: ${tl.high}dB`);
      
      const rw = calculateRw(tl, wall.template.acousticProperties.density, wall.template.thickness);
      
      console.log(`      ‚Ä¢ Masa por √°rea: ${(wall.template.acousticProperties.density * wall.template.thickness).toFixed(1)} kg/m¬≤`);
      console.log(`      ‚Ä¢ Rw calculado: ${rw.value.toFixed(1)}dB\n`);
      
      console.log(`   üîä PROPIEDADES AC√öSTICAS:`);
      console.log(`      üìà P√©rdida de Transmisi√≥n:`);
      console.log(`         ‚Ä¢ Frecuencias Bajas (125-250Hz): ${tl.low}dB`);
      console.log(`         ‚Ä¢ Frecuencias Medias (500-1000Hz): ${tl.mid}dB`);
      console.log(`         ‚Ä¢ Frecuencias Altas (2000-4000Hz): ${tl.high}dB`);
      console.log(`         ‚Ä¢ Promedio Ponderado: ${avgTransmissionLoss.toFixed(1)}dB`);
      
      // ‚úÖ NUEVO: Mostrar Rw calculado con √©nfasis
      console.log(`\n      üéØ === √çNDICE Rw (ISO 717-1) ===`);
      console.log(`         ‚Ä¢ Valor Rw: ${rw.value.toFixed(1)}dB`);
      console.log(`         ‚Ä¢ Clasificaci√≥n: ${rw.classification}`);
      console.log(`         ‚Ä¢ Espectro de referencia: ${rw.spectrum}`);
      console.log(`      ================================\n`);
      
      console.log(`      üìâ Absorci√≥n Ac√∫stica:`);
      console.log(`         ‚Ä¢ Bajas: Œ± = ${abs.low} (${(abs.low * 100).toFixed(1)}%)`);
      console.log(`         ‚Ä¢ Medias: Œ± = ${abs.mid} (${(abs.mid * 100).toFixed(1)}%)`);
      console.log(`         ‚Ä¢ Altas: Œ± = ${abs.high} (${(abs.high * 100).toFixed(1)}%)`);
      
      console.log(`      üèóÔ∏è  Propiedades del Material:`);
      console.log(`         ‚Ä¢ Densidad: ${wall.template.acousticProperties.density} kg/m¬≥`);
      console.log(`         ‚Ä¢ Porosidad: ${(wall.template.acousticProperties.porosity * 100).toFixed(1)}%`);
      
      // An√°lisis t√©rmico
      console.log(`   üå°Ô∏è  AN√ÅLISIS T√âRMICO:`);
      console.log(`      ‚Ä¢ Conductividad T√©rmica: ${wall.template.thermalProperties.conductivity} W/m¬∑K`);
      console.log(`      ‚Ä¢ Resistencia T√©rmica: ${wall.template.thermalProperties.resistance} m¬≤¬∑K/W`);
      
      // An√°lisis econ√≥mico
      const materialCost = wall.template.cost.material * wall.area;
      const installationCost = wall.template.cost.installation * wall.area;
      const totalCost = materialCost + installationCost;
      
      console.log(`   üí∞ AN√ÅLISIS ECON√ìMICO:`);
      console.log(`      ‚Ä¢ Costo Material: ‚Ç¨${materialCost.toFixed(2)}`);
      console.log(`      ‚Ä¢ Costo Instalaci√≥n: ‚Ç¨${installationCost.toFixed(2)}`);
      console.log(`      ‚Ä¢ Costo Total: ‚Ç¨${totalCost.toFixed(2)}`);
      console.log(`      ‚Ä¢ Costo por m¬≤: ‚Ç¨${(totalCost / wall.area).toFixed(2)}/m¬≤`);
      
      // Evaluaci√≥n del estado
      console.log(`   üîß EVALUACI√ìN DEL ESTADO:`);
      const conditionFactors = {
        'excellent': { factor: 1.0, desc: 'Rendimiento √≥ptimo' },
        'good': { factor: 0.95, desc: 'Rendimiento muy bueno' },
        'fair': { factor: 0.85, desc: 'Rendimiento aceptable' },
        'poor': { factor: 0.7, desc: 'Rendimiento reducido' },
        'damaged': { factor: 0.5, desc: 'Requiere reparaci√≥n urgente' }
      };
      
      const condition = conditionFactors[wall.currentCondition];
      const effectiveTL = avgTransmissionLoss * condition.factor;
      const effectiveRw = rw.value * condition.factor;
      
      console.log(`      ‚Ä¢ Factor de estado: ${condition.factor} (${condition.desc})`);
      console.log(`      ‚Ä¢ P√©rdida efectiva: ${effectiveTL.toFixed(1)}dB`);
      console.log(`      ‚Ä¢ Rw efectivo: ${effectiveRw.toFixed(1)}dB`);
      
      if (condition.factor < 0.8) {
        console.log(`      ‚ö†Ô∏è  RECOMENDACI√ìN: Considerar mantenimiento o reemplazo`);
      }
      
      // ‚úÖ NUEVO: Evaluaci√≥n espec√≠fica del Rw
      console.log(`\n   üéØ EVALUACI√ìN ESPEC√çFICA Rw:`);
      if (rw.value < 40) {
        console.log(`      ‚ùå ADVERTENCIA: Rw bajo (${rw.value.toFixed(1)}dB) - Aislamiento insuficiente`);
        console.log(`      üí° RECOMENDACI√ìN: Considerar mejora del material o aumento de espesor`);
      } else if (rw.value >= 55) {
        console.log(`      ‚úÖ EXCELENTE: Rw alto (${rw.value.toFixed(1)}dB) - Aislamiento superior`);
        console.log(`      üèÜ Esta pared cumple con est√°ndares de alta calidad ac√∫stica`);
      } else if (rw.value >= 45) {
        console.log(`      ‚úÖ BUENO: Rw adecuado (${rw.value.toFixed(1)}dB) - Aislamiento apropiado`);
        console.log(`      üëç Cumple con requisitos est√°ndar de construcci√≥n`);
      } else {
        console.log(`      ‚ö†Ô∏è  REGULAR: Rw b√°sico (${rw.value.toFixed(1)}dB) - Aislamiento m√≠nimo`);
        console.log(`      üí° Considerar mejoras si se requiere mayor aislamiento`);
      }
      
      console.log('\n' + '='.repeat(60) + '\n'); // Separador visual
    });
    
    // An√°lisis comparativo del conjunto
    if (walls.length > 1) {
      console.log('üìä AN√ÅLISIS COMPARATIVO DEL EDIFICIO:');
      console.log('=====================================');
      
      const totalArea = walls.reduce((sum, w) => sum + w.area, 0);
      const totalCost = walls.reduce((sum, w) => 
        sum + (w.template.cost.material + w.template.cost.installation) * w.area, 0
      );
      
      const avgTL = walls.reduce((sum, wall) => {
        const tl = wall.template.acousticProperties.transmissionLoss;
        return sum + (tl.low + tl.mid + tl.high) / 3;
      }, 0) / walls.length;
      
      // ‚úÖ NUEVO: C√°lculo del Rw promedio con detalles
      console.log(`\nüî¨ CALCULANDO RW PROMEDIO DEL EDIFICIO:`);
      const rwValues = walls.map((wall, index) => {
        const tl = wall.template.acousticProperties.transmissionLoss;
        const rw = calculateRw(tl, wall.template.acousticProperties.density, wall.template.thickness);
        console.log(`   ‚Ä¢ Pared ${index + 1}: Rw = ${rw.value.toFixed(1)}dB (${rw.classification})`);
        return rw.value;
      });
      
      const avgRw = rwValues.reduce((sum, value) => sum + value, 0) / rwValues.length;
      const minRw = Math.min(...rwValues);
      const maxRw = Math.max(...rwValues);
      
      console.log(`\nüìà ESTAD√çSTICAS GENERALES:`);
      console.log(`   ‚Ä¢ √Årea total: ${totalArea.toFixed(2)}m¬≤`);
      console.log(`   ‚Ä¢ Costo total: ‚Ç¨${totalCost.toFixed(2)}`);
      console.log(`   ‚Ä¢ P√©rdida de transmisi√≥n promedio: ${avgTL.toFixed(1)}dB`);
      
      // ‚úÖ ESTAD√çSTICAS Rw DESTACADAS
      console.log(`\nüéØ === ESTAD√çSTICAS Rw DEL EDIFICIO ===`);
      console.log(`   ‚Ä¢ Rw promedio: ${avgRw.toFixed(1)}dB`);
      console.log(`   ‚Ä¢ Rw m√≠nimo: ${minRw.toFixed(1)}dB`);
      console.log(`   ‚Ä¢ Rw m√°ximo: ${maxRw.toFixed(1)}dB`);
      console.log(`   ‚Ä¢ Rango: ${(maxRw - minRw).toFixed(1)}dB`);
      console.log(`=====================================`);
      
      // Identificar extremos de rendimiento
      const bestAcoustic = walls.reduce((best, wall) => {
        const currentTL = (wall.template.acousticProperties.transmissionLoss.low + 
                          wall.template.acousticProperties.transmissionLoss.mid + 
                          wall.template.acousticProperties.transmissionLoss.high) / 3;
        const bestTL = (best.template.acousticProperties.transmissionLoss.low + 
                       best.template.acousticProperties.transmissionLoss.mid + 
                       best.template.acousticProperties.transmissionLoss.high) / 3;
        return currentTL > bestTL ? wall : best;
      });
      
      const worstAcoustic = walls.reduce((worst, wall) => {
        const currentTL = (wall.template.acousticProperties.transmissionLoss.low + 
                          wall.template.acousticProperties.transmissionLoss.mid + 
                          wall.template.acousticProperties.transmissionLoss.high) / 3;
        const worstTL = (worst.template.acousticProperties.transmissionLoss.low + 
                        worst.template.acousticProperties.transmissionLoss.mid + 
                        worst.template.acousticProperties.transmissionLoss.high) / 3;
        return currentTL < worstTL ? wall : worst;
      });
      
      console.log(`\nüèÜ Mejor aislamiento ac√∫stico: ${bestAcoustic.template.name}`);
      console.log(`‚ö†Ô∏è  Peor aislamiento ac√∫stico: ${worstAcoustic.template.name}`);
      
      // Sistema de recomendaciones autom√°ticas
      console.log(`\nüí° RECOMENDACIONES:`);
      if (avgTL < 40) {
        console.log(`   ‚ö†Ô∏è  El aislamiento promedio es bajo (${avgTL.toFixed(1)}dB)`);
        console.log(`   üí° Considerar mejorar las paredes con peor rendimiento`);
      }
      
      const poorWalls = walls.filter(w => 
        w.currentCondition === 'poor' || w.currentCondition === 'damaged'
      ).length;
      
      if (poorWalls > 0) {
        console.log(`   üîß ${poorWalls} pared(es) necesitan mantenimiento`);
        console.log(`   üí° Priorizar reparaciones para mantener el rendimiento ac√∫stico`);
      }
      
      if (totalCost / totalArea > 50) {
        console.log(`   üí∞ Costo elevado por m¬≤ (‚Ç¨${(totalCost / totalArea).toFixed(2)}/m¬≤)`);
        console.log(`   üí° Evaluar alternativas m√°s econ√≥micas para futuras expansiones`);
      }
    }
    
    console.log('\n‚úÖ AN√ÅLISIS AC√öSTICO COMPLETADO');
    console.log('================================\n');
  };

  /**
   * @function generateAcousticReport
   * @description Genera informe t√©cnico completo en formato JSON (ACTUALIZADO CON Rw)
   */
  const generateAcousticReport = () => {
    const report = {
      timestamp: new Date().toISOString(),
      totalWalls: walls.length,
      totalArea: walls.reduce((sum, w) => sum + w.area, 0),
      totalCost: walls.reduce((sum, w) => 
        sum + (w.template.cost.material + w.template.cost.installation) * w.area, 0
      ),
      // ‚úÖ NUEVO: Estad√≠sticas de Rw
      acousticSummary: {
        averageRw: walls.length > 0 ? walls.reduce((sum, wall) => {
          const tl = wall.template.acousticProperties.transmissionLoss;
          const rw = calculateRw(tl, wall.template.acousticProperties.density, wall.template.thickness);
          return sum + rw.value;
        }, 0) / walls.length : 0,
        minRw: walls.length > 0 ? Math.min(...walls.map(wall => {
          const tl = wall.template.acousticProperties.transmissionLoss;
          return calculateRw(tl, wall.template.acousticProperties.density, wall.template.thickness).value;
        })) : 0,
        maxRw: walls.length > 0 ? Math.max(...walls.map(wall => {
          const tl = wall.template.acousticProperties.transmissionLoss;
          return calculateRw(tl, wall.template.acousticProperties.density, wall.template.thickness).value;
        })) : 0
      },
      walls: walls.map((wall, index) => {
        const tl = wall.template.acousticProperties.transmissionLoss;
        const rw = calculateRw(tl, wall.template.acousticProperties.density, wall.template.thickness);
        
        return {
          index: index + 1,
          id: wall.id,
          template: wall.template.name,
          area: wall.area,
          condition: wall.currentCondition,
          acousticRating: wall.acousticRating,
          transmissionLoss: wall.template.acousticProperties.transmissionLoss,
          absorption: wall.template.acousticProperties.absorptionCoefficient,
          density: wall.template.acousticProperties.density,
          thickness: wall.template.thickness,
          // ‚úÖ NUEVO: Datos del Rw
          rw: {
            value: rw.value,
            classification: rw.classification,
            spectrum: rw.spectrum
          },
          cost: (wall.template.cost.material + wall.template.cost.installation) * wall.area
        };
      })
    };
    
    console.log('üìã INFORME AC√öSTICO GENERADO (CON Rw):');
    console.log(JSON.stringify(report, null, 2));
    
    // Persistencia en localStorage
    localStorage.setItem('acoustic-report', JSON.stringify(report));
    console.log('üíæ Informe guardado en localStorage como "acoustic-report"');
  };

  /**
   * @function generateAcousticHeatmap
   * @description Actualizado para abrir modal despu√©s de generar heatmap
   */
  const generateAcousticHeatmap = () => {
    console.clear();
    console.log('üî• GENERANDO MAPA DE CALOR AC√öSTICO DESDE WALLSMANAGER');
    console.log('======================================================\n');
    
    if (walls.length === 0) {
      console.log('‚ö†Ô∏è No hay paredes para analizar');
      alert('‚ö†Ô∏è Primero necesitas extruir una forma 3D para generar paredes');
      return;
    }
    
    const heatmapData = AcousticAnalysisEngine.generateDetailedAcousticHeatmap(
      walls,
      openings,
      planeXZCoordinates,
      70 // Nivel de ruido externo en dB
    );
    
    localStorage.setItem('acoustic-heatmap-data', JSON.stringify(heatmapData));
    console.log('üíæ Datos del mapa de calor guardados en localStorage');
    
    // ‚úÖ NUEVO: Abrir modal profesional en lugar de alert
    setShowAnalysisModal(true);
  };

  /**
   * @section Funciones helper para UI
   * @description Utilidades para renderizado y visualizaci√≥n
   */

  /**
   * @function getConditionColor
   * @description Determina clases CSS para colorear estados de conservaci√≥n
   * 
   * @param {WallCondition} condition - Estado de conservaci√≥n de la pared
   * @returns {string} Clases CSS de Tailwind para styling
   */
  const getConditionColor = (condition: WallCondition): string => {
    const colors = {
      'excellent': 'bg-green-100 text-green-800',
      'good': 'bg-blue-100 text-blue-800',
      'fair': 'bg-yellow-100 text-yellow-800',
      'poor': 'bg-orange-100 text-orange-800',
      'damaged': 'bg-red-100 text-red-800'
    };
    return colors[condition] || 'bg-gray-100 text-gray-800';
  };

  /**
   * @function getConditionLabel
   * @description Convierte estados t√©cnicos a etiquetas amigables
   * 
   * @param {WallCondition} condition - Estado t√©cnico
   * @returns {string} Etiqueta localizada para mostrar al usuario
   */
  const getConditionLabel = (condition: WallCondition): string => {
    const labels = {
      'excellent': 'Excelente',
      'good': 'Bueno',
      'fair': 'Regular',
      'poor': 'Malo',
      'damaged': 'Da√±ado'
    };
    return labels[condition] || condition;
  };

  /**
   * @section Renderizado condicional
   * @description Determina qu√© vista mostrar seg√∫n el estado de visibilidad
   */

  // Vista minimizada - Solo bot√≥n de acceso
  // if (!isVisible) {
  //   return (
  //     // <button 
  //     //   onClick={onToggle}
  //     //   className="fixed top-4 right-4 bg-green-600 text-white px-4 py-2 rounded-lg shadow-lg hover:bg-green-700 transition-colors z-50"
  //     //   title="Abrir gestor de paredes"
  //     // >
  //     //   üß± Gestionar Paredes
  //     // </button>
  //   );
  // }

  // C√°lculo de pared seleccionada
  const selectedWall = selectedWallId ? walls.find(w => w.id === selectedWallId) : null;

  /**
   * @section Renderizado del panel principal
   * @description Interface completa de gesti√≥n de paredes
   */
  return (
    <>
      {/* BOT√ìN DE CIERRE */}
      {/* <button 
        onClick={onToggle}
        className="fixed top-4 right-4 bg-gray-600 text-white px-4 py-2 rounded-lg shadow-lg hover:bg-gray-700 transition-colors z-50"
        title="Cerrar gestor de paredes"
      >
        ‚ùå Cerrar Manager
      </button> */}

      {/* PANEL PRINCIPAL DE GESTI√ìN */}
      <div className="fixed top-16 right-4 bg-white rounded-lg shadow-xl p-4 space-y-4 z-40 w-80 max-h-[80vh] overflow-y-auto">
        
        {/* HEADER CON BOTONES DE AN√ÅLISIS R√ÅPIDO */}
        {/* <div className="flex justify-between items-center">
          <h3 className="font-bold text-lg text-gray-800">
            üß± Gesti√≥n de Paredes
          </h3>
          <div className="flex space-x-1">
            <button
              onClick={showDetailedAcousticAnalysis}
              className="px-2 py-1 bg-blue-500 text-white rounded text-xs hover:bg-blue-600 transition-colors"
              title="An√°lisis ac√∫stico detallado"
            >
              üîä
            </button>
            <button
              onClick={generateAcousticReport}
              className="px-2 py-1 bg-green-500 text-white rounded text-xs hover:bg-green-600 transition-colors"
              title="Generar informe t√©cnico"
            >
              üìã
            </button>
          </div>
        </div> */}
        
        {/* LISTA DE PAREDES EXISTENTES */}
        <div className="space-y-2">
          <h4 className="font-medium text-gray-700">Paredes actuales:</h4>
          {walls.length === 0 ? (
            <p className="text-gray-500 text-sm">No hay paredes creadas</p>
          ) : (
            walls.map((wall, index) => (
              <div
                key={wall.id}
                className={`p-3 rounded-lg border-2 cursor-pointer transition-all ${
                  selectedWallId === wall.id
                    ? 'border-blue-500 bg-blue-50'
                    : 'border-gray-200 hover:border-gray-300'
                }`}
                onClick={() => setSelectedWallId(wall.id)}
              >
                <div className="flex justify-between items-start">
                  <div>
                    <div className="font-medium">Pared {index + 1}</div>
                    <div className="text-sm text-gray-600">
                      {wall.template.name}
                    </div>
                    <div className="text-xs text-gray-500">
                      {wall.area.toFixed(1)}m¬≤ ‚Ä¢ ‚Ç¨{(wall.template.cost.material * wall.area).toFixed(0)}
                    </div>
                    {/* INDICADOR STC PROMEDIO */}
                    <div className="text-xs text-blue-600">
                      STC: {((wall.template.acousticProperties.transmissionLoss.low + 
                               wall.template.acousticProperties.transmissionLoss.mid + 
                               wall.template.acousticProperties.transmissionLoss.high) / 3).toFixed(1)}dB
                    </div>
                  </div>
                  <div className="flex flex-col items-end space-y-1">
                    {/* BADGE DE ESTADO DE CONSERVACI√ìN */}
                    <span className={`px-2 py-1 rounded text-xs font-medium ${getConditionColor(wall.currentCondition)}`}>
                      {getConditionLabel(wall.currentCondition)}
                    </span>
                    {/* BADGE DE RATING AC√öSTICO */}
                    {wall.acousticRating && (
                      <span className={`px-2 py-1 rounded text-xs font-medium ${
                        wall.acousticRating === 'A' ? 'bg-green-100 text-green-800' :
                        wall.acousticRating === 'B' ? 'bg-blue-100 text-blue-800' :
                        wall.acousticRating === 'C' ? 'bg-yellow-100 text-yellow-800' :
                        wall.acousticRating === 'D' ? 'bg-orange-100 text-orange-800' :
                        'bg-red-100 text-red-800'
                      }`}>
                        {wall.acousticRating}
                      </span>
                    )}
                  </div>
                </div>
              </div>
            ))
          )}
        </div>

        {/* PANEL DE EDICI√ìN DE PARED SELECCIONADA */}
        {selectedWall && (
          <div className="border-t pt-4 space-y-4">
            <h4 className="font-medium text-gray-700">
              Editar Pared Seleccionada:
            </h4>
            
            {/* SELECTOR DE TEMPLATE DE PARED */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Tipo de Pared:
              </label>
              <select
                value={selectedWall.template.id}
                onChange={(e) => {
                  const newTemplate = WALL_TEMPLATES[e.target.value];
                  if (newTemplate) {
                    updateWall(selectedWall.id, { template: newTemplate });
                  }
                }}
                className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              >
                {Object.values(WALL_TEMPLATES).map(template => (
                  <option key={template.id} value={template.id}>
                    {template.name} (‚Ç¨{template.cost.material}/m¬≤)
                  </option>
                ))}
              </select>
            </div>

            {/* SELECTOR DE ESTADO DE CONSERVACI√ìN */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Estado Actual:
              </label>
              <select
                value={selectedWall.currentCondition}
                onChange={(e) => {
                  updateWall(selectedWall.id, { 
                    currentCondition: e.target.value as WallCondition
                  });
                }}
                className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              >
                <option value="excellent">Excelente</option>
                <option value="good">Bueno</option>
                <option value="fair">Regular</option>
                <option value="poor">Malo</option>
                <option value="damaged">Da√±ado</option>
              </select>
            </div>

            {/* PANEL DE INFORMACI√ìN AC√öSTICA DETALLADA */}
            <div className="bg-blue-50 p-3 rounded-lg">
              <h5 className="font-medium text-gray-700 mb-2">üîä Propiedades Ac√∫sticas:</h5>
              <div className="space-y-1 text-sm">
                <div>P√©rdida de Transmisi√≥n:</div>
                <div className="ml-2 text-gray-600">
                  ‚Ä¢ Graves: {selectedWall.template.acousticProperties.transmissionLoss.low}dB
                </div>
                <div className="ml-2 text-gray-600">
                  ‚Ä¢ Medios: {selectedWall.template.acousticProperties.transmissionLoss.mid}dB
                </div>
                <div className="ml-2 text-gray-600">
                  ‚Ä¢ Agudos: {selectedWall.template.acousticProperties.transmissionLoss.high}dB
                </div>
                <div className="border-t pt-1 mt-1">
                  <div className="flex justify-between">
                    <span>Promedio:</span>
                    <span className="font-medium">
                      {((selectedWall.template.acousticProperties.transmissionLoss.low + 
                         selectedWall.template.acousticProperties.transmissionLoss.mid + 
                         selectedWall.template.acousticProperties.transmissionLoss.high) / 3).toFixed(1)}dB
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span>Densidad:</span>
                    <span>{selectedWall.template.acousticProperties.density} kg/m¬≥</span>
                  </div>
                  <div className="flex justify-between">
                    <span>Rating:</span>
                    <span className="font-medium">{selectedWall.acousticRating || 'N/A'}</span>
                  </div>
                </div>
              </div>
            </div>

            {/* PANEL DE AN√ÅLISIS DE COSTOS */}
            <div className="bg-green-50 p-3 rounded-lg">
              <h5 className="font-medium text-gray-700 mb-2">üí∞ An√°lisis de Costos:</h5>
              <div className="space-y-1 text-sm">
                <div className="flex justify-between">
                  <span>Material:</span>
                  <span>‚Ç¨{(selectedWall.template.cost.material * selectedWall.area).toFixed(2)}</span>
                </div>
                <div className="flex justify-between">
                  <span>Instalaci√≥n:</span>
                  <span>‚Ç¨{(selectedWall.template.cost.installation * selectedWall.area).toFixed(2)}</span>
                </div>
                <div className="flex justify-between font-medium border-t pt-1">
                  <span>Total:</span>
                  <span>‚Ç¨{((selectedWall.template.cost.material + selectedWall.template.cost.installation) * selectedWall.area).toFixed(2)}</span>
                </div>
              </div>
            </div>

            {/* BOTONES DE ACCI√ìN PARA PARED SELECCIONADA */}
            <div className="flex space-x-2">
              <button
                onClick={() => setSelectedWallId(null)}
                className="flex-1 px-3 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600 transition-colors"
              >
                Cancelar
              </button>
              <button
                onClick={() => {
                  if (confirm('¬øEst√°s seguro de que quieres eliminar esta pared?')) {
                    deleteWall(selectedWall.id);
                    setSelectedWallId(null);
                  }
                }}
                className="flex-1 px-3 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 transition-colors"
              >
                Eliminar
              </button>
            </div>
          </div>
        )}

        {/* RESUMEN GENERAL DEL PROYECTO */}
        <div className="border-t pt-4">
          <h4 className="font-medium text-gray-700 mb-2">üìä Resumen General:</h4>
          <div className="bg-green-50 p-3 rounded-lg text-sm space-y-2">
            <div className="flex justify-between">
              <span>Total de paredes:</span>
              <span>{walls.length}</span>
            </div>
            <div className="flex justify-between">
              <span>√Årea total:</span>
              <span>{walls.reduce((sum, w) => sum + w.area, 0).toFixed(1)}m¬≤</span>
            </div>
            <div className="flex justify-between font-medium">
              <span>Costo estimado:</span>
              <span>
                ‚Ç¨{walls.reduce((sum, w) => 
                  sum + (w.template.cost.material + w.template.cost.installation) * w.area, 0
                ).toFixed(0)}
              </span>
            </div>
            
            {/* INFORMACI√ìN AC√öSTICA EN RESUMEN */}
            {walls.length > 0 && (
              <div className="border-t pt-2 space-y-1">
                <div className="flex justify-between text-xs">
                  <span>STC Promedio:</span>
                  <span>
                    {(walls.reduce((sum, w) => {
                      const tl = w.template.acousticProperties.transmissionLoss;
                      return sum + (tl.low + tl.mid + tl.high) / 3;
                    }, 0) / walls.length).toFixed(1)}dB
                  </span>
                </div>
                <div className="flex justify-between text-xs">
                  <span>Densidad Promedio:</span>
                  <span>
                    {(walls.reduce((sum, w) => sum + w.template.acousticProperties.density, 0) / walls.length).toFixed(0)} kg/m¬≥
                  </span>
                </div>
              </div>
            )}
          </div>
          
          {/* BOTONES DE AN√ÅLISIS PRINCIPAL - ACTUALIZADO */}
          <div className="flex space-x-2 mt-2">
            <button
              onClick={() => setShowAnalysisModal(true)}
              className="flex-1 px-3 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors text-sm"
              title="Abrir an√°lisis profesional"
            >
              üìä An√°lisis Profesional
            </button>
            <button
              onClick={generateAcousticHeatmap}
              className="flex-1 px-3 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 transition-colors text-sm"
              title="Generar mapa de calor + an√°lisis"
            >
              üî• Heatmap + An√°lisis
            </button>
          </div>
        </div>

        {/* SECCI√ìN DE AN√ÅLISIS AC√öSTICO AVANZADO */}
        <div className="border-t pt-4">
          <h3 className="text-lg font-semibold mb-2">üî• An√°lisis Ac√∫stico</h3>
          
          <div className="grid grid-cols-2 gap-2">
            <button
              onClick={() => recalculateAllWallsWithOpenings(openings)}
              className="px-3 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors text-sm"
              title="Recalcular con aberturas actuales"
            >
              üîä Recalcular
            </button>
            
            <button
              onClick={generateAcousticHeatmap}
              className="px-3 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 transition-colors text-sm"
              title="Generar an√°lisis completo"
            >
              üî• An√°lisis Completo
            </button>
          </div>
          
          <div className="mt-2 text-xs text-gray-600">
            üí° El mapa de calor se activar√° autom√°ticamente en la escena 3D
          </div>
        </div>
      </div>

      {/* ‚úÖ NUEVO: Modal de an√°lisis ac√∫stico */}
      <AcousticAnalysisModal
        isOpen={showAnalysisModal}
        onClose={() => setShowAnalysisModal(false)}
        walls={walls}
        calculateRw={calculateRw}
      />
    </>
  );
};

/**
 * @exports WallsManager
 * @description Exportaci√≥n por defecto del gestor de paredes
 */

/**
 * @namespace ComponentMetadata
 * @description Metadatos t√©cnicos del componente
 * 
 * @property {string} componentType - "Walls Management Interface"
 * @property {string[]} features - [
 *   "CRUD Operations", "Acoustic Analysis", "Cost Management", 
 *   "Condition Tracking", "Report Generation", "Heatmap Visualization"
 * ]
 * @property {string[]} analysisTypes - [
 *   "Acoustic Properties", "Thermal Analysis", "Economic Evaluation",
 *   "Condition Assessment", "Comparative Statistics"
 * ]
 * @property {string[]} integrations - [
 *   "WallsStore", "OpeningsStore", "DrawingStore", "AcousticAnalysisEngine"
 * ]
 * @property {Object} acousticMetrics - M√©tricas ac√∫sticas analizadas
 * @property {string[]} acousticMetrics.transmissionLoss - ["Low", "Mid", "High", "Average"]
 * @property {string[]} acousticMetrics.absorption - ["By Frequency Band", "Percentage Values"]
 * @property {string[]} acousticMetrics.ratings - ["A", "B", "C", "D", "E"]
 * @property {Object} conditionStates - Estados de conservaci√≥n
 * @property {number} conditionStates.excellent - 1.0 (factor)
 * @property {number} conditionStates.good - 0.95 (factor)
 * @property {number} conditionStates.fair - 0.85 (factor)
 * @property {number} conditionStates.poor - 0.7 (factor)
 * @property {number} conditionStates.damaged - 0.5 (factor)
 * @property {Object} reporting - Capacidades de reporting
 * @property {string} reporting.format - "JSON structured"
 * @property {string} reporting.storage - "localStorage persistence"
 * @property {string[]} reporting.includes - [
 *   "Metadata", "Wall Details", "Statistics", "Recommendations"
 * ]
 */